S'->S
S->CLASS S
S->FUNCTION S
S->CLASS_ID_DECLARE S
S->ε
CLASS->ACCESS_CONTROL CLASS_OPTIONAL_ACCESS_CONTROL class id { CLASS_BODY } ;
FUNCTION->func ACCESS_CONTROL FUNCTION_OPTIONAL_ACCESS_CONTROL FUNCTION_TYPEDEF id ( PARAM ) { BODY RETURN }
ACCESS_CONTROL->public
ACCESS_CONTROL->private
ACCESS_CONTROL->protected
ACCESS_CONTROL->ε
CLASS_OPTIONAL_ACCESS_CONTROL->final
CLASS_OPTIONAL_ACCESS_CONTROL->abstract
CLASS_OPTIONAL_ACCESS_CONTROL->ε
FUNCTION_OPTIONAL_ACCESS_CONTROL->abstract
FUNCTION_OPTIONAL_ACCESS_CONTROL->static FUNCTION_OPTIONAL_ACCESS_CONTROL
FUNCTION_OPTIONAL_ACCESS_CONTROL->final
FUNCTION_OPTIONAL_ACCESS_CONTROL->ε
ID_OPTIONAL_ACCESS_CONTROL->static ID_OPTIONAL_ACCESS_CONTROL
ID_OPTIONAL_ACCESS_CONTROL->final
ID_OPTIONAL_ACCESS_CONTROL->ε
FUNCTION_TYPEDEF->void
FUNCTION_TYPEDEF->TYPEDEF
TYPEDEF->TYPE
TYPE->id
TYPE->int
TYPE->char
TYPE->boolean
TYPE->short
TYPE->long
TYPE->string
TYPE->float
TYPE->double
TYPE->auto
CLASS_BODY->ε
CLASS_BODY->CLASS_CONTENT CLASS_BODY
CLASS_CONTENT->FUNCTION
CLASS_CONTENT->CLASS_ID_DECLARE
CLASS_ID_DECLARE->ACCESS_CONTROL ID_OPTIONAL_ACCESS_CONTROL TYPEDEF id PARAM_DECLARE_CONTENT DECLARE_ARGS ;
PARAM_DECLARE_CONTENT->= EXPRESSION
PARAM_DECLARE_CONTENT->ε
DECLARE_ARGS->, id PARAM_DECLARE_CONTENT DECLARE_ARGS
DECLARE_ARGS->ε
PARAM->ε
PARAM->TYPEDEF id PARAM_ARGS
PARAM_ARGS->, TYPEDEF od PARAM_ARGS
RETURN->return RETURN_CONTENT ;
RETURN_CONTENT->ε
RETURN_CONTENT->EXPRESSION
BODY->ε
BODY->BODY_CONTENT BODY
BODY_CONTENT->ID_DECLARE
BODY_CONTENT->EXPRESSION ;
BODY_CONTENT->IF
BODY_CONTENT->WHILE
BODY_CONTENT->DO_WHILE
BODY_CONTENT->FOR
BODY_CONTENT->DO_FUNCTION
BODY_CONTENT->PRINT_FUNCTION
BODY_CONTENT->CAL_EXPRESSION ;
CAL_EXPRESSION->id = EXPRESSION
CAL_EXPRESSION->id OPERATION_ASSIGN EXPRESSION
ID_DECLARE->ID_OPTIONAL_ACCESS_CONTROL TYPEDEF id PARAM_DECLARE_CONTENT DECLARE_ARGS ;
EXPRESSION->VALUE
EXPRESSION->( EXPRESSION )
EXPRESSION->EXPRESSION OPERATION EXPRESSION
VALUE->const
VALUE->OPERATION_OPTIONAL_SELF_LOG true
VALUE->OPERATION_OPTIONAL_SELF_LOG false
VALUE->SELF_OPERATION id SELF_OPERATION
SELF_OPERATION->++
SELF_OPERATION->--
SELF_OPERATION->ε
OPERATION->OPERATION_CAL
OPERATION->OPERATION_COMP
OPERATION->OPERATION_ASSIGN
OPERATION->OPERATION_LOG
OPERATION->OPERATION_SELF_LOG
OPERATION_CAL->+
OPERATION_CAL->-
OPERATION_CAL->*
OPERATION_CAL->/
OPERATION_CAL->|
OPERATION_CAL->&
OPERATION_CAL->~
OPERATION_CAL->^
OPERATION_CAL->%
OPERATION_COMP-><
OPERATION_COMP-><=
OPERATION_COMP->>
OPERATION_COMP->>=
OPERATION_COMP->==
OPERATION_COMP->!=
OPERATION_ASSIGN->=
OPERATION_ASSIGN->/=
OPERATION_ASSIGN->*=
OPERATION_ASSIGN->+=
OPERATION_ASSIGN->-=
OPERATION_ASSIGN->%=
OPERATION_LOG->&&
OPERATION_LOG->||
OPERATION_SELF_LOG->!
BOOL_EXPRESSION->BOOL_EXPRESSION_BODY BOOL_EXPRESSION_ARGS
OPERATION_OPTIONAL_SELF_LOG->ε
OPERATION_OPTIONAL_SELF_LOG->OPERATION_SELF_LOG
BOOL_EXPRESSION_BODY->OPERATION_OPTIONAL_SELF_LOG VALUE
BOOL_EXPRESSION_BODY->OPERATION_OPTIONAL_SELF_LOG VALUE OPERATION_COMP VALUE
BOOL_EXPRESSION_BODY->( BOOL_EXPRESSION_BODY )
BOOL_EXPRESSION_ARGS->OPERATION_LOG BOOL_EXPRESSION_BODY
BOOL_EXPRESSION_ARGS->ε
PRINT_FUNCTION->print ( EXPRESSION ) ;
IF->if ( BOOL_EXPRESSION ) { BODY } ELSE_IF
ELSE_IF->ε
ELSE_IF->else IF
ELSE_IF->else { BODY }
FOR->for ( FOR_ID_DECLARE ; BOOL_EXPRESSION ; EXPRESSION ) { BODY }
FOR_ID_DECLARE->ε
FOR_ID_DECLARE->TYPEDEF id FOR_PARAM_DECLARE_CONTENT FOR_DECLARE_ARGS
FOR_PARAM_DECLARE_CONTENT->= EXPRESSION
FOR_DECLARE_ARGS->, id FOR_PARAM_DECLARE_CONTENT FOR_DECLARE_ARGS
FOR_DECLARE_ARGS->ε
WHILE->while ( BOOL_EXPRESSION ) { BODY }
DO_WHILE->do { BODY } while ( BOOL_EXPRESSION ) ;
DO_FUNCTION->id . id ( DO_FUNC_EXPRESSION ) ;
DO_FUNCTION->id ( DO_FUNC_EXPRESSION ) ;
DO_FUNC_EXPRESSION->ε
DO_FUNC_EXPRESSION->EXPRESSION